services:
  # Banco de Dados PostgreSQL
  postgres-db:
    build:
      context: .
      dockerfile: Dockerfile  # Caminho para o Dockerfile customizado
    image: postgres:17
    container_name: postgres-db
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      READ_USER: ${READ_USER}
      READ_PASSWORD: ${READ_PASSWORD}
      WRITE_USER: ${WRITE_USER}
      WRITE_PASSWORD: ${WRITE_PASSWORD}
      EF_USER: ${EF_USER}
      EF_PASSWORD: ${EF_PASSWORD}
    networks:
      - app_network

  # Banco de Dados MongoDB para cache e notificações
  mongo:
    image: mongo:latest
    container_name: mongo_db
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app_network

  # Backend .NET
  backend:
    build: 
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend_api
    restart: always
    ports:
      - "5000:5000"
    depends_on:
      - mongo
      - postgres-db    
    networks:
      - app_network

  # Frontend Flutter Web
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flutter_web
    restart: always
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  mongo_data:
  postgres-db-data:
